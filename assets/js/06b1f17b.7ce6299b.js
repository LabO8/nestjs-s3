"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[239],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),k=u(n),d=a,b=k["".concat(o,".").concat(d)]||k[d]||p[d]||c;return n?r.createElement(b,i(i({ref:t},l),{},{components:n})):r.createElement(b,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<c;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},235:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return l},default:function(){return k}});var r=n(7462),a=n(3366),c=(n(7294),n(3905)),i=["components"],s={id:"buckets",title:"Buckets service",sidebar_label:"Buckets",slug:"/docs/buckets-service"},o=void 0,u={unversionedId:"buckets",id:"buckets",title:"Buckets service",description:"Introduction",source:"@site/docs/buckets.md",sourceDirName:".",slug:"/docs/buckets-service",permalink:"/nestjs-s3/docs/docs/buckets-service",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/buckets.md",tags:[],version:"current",frontMatter:{id:"buckets",title:"Buckets service",sidebar_label:"Buckets",slug:"/docs/buckets-service"},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/nestjs-s3/docs/"},next:{title:"Readme",permalink:"/nestjs-s3/docs/api/"}},l=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Basic usage",id:"basic-usage",children:[{value:"Listing buckets",id:"listing-buckets",children:[],level:3},{value:"Creating buckets",id:"creating-buckets",children:[],level:3}],level:2}],p={toc:l};function k(e){var t=e.components,n=(0,a.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"introduction"},"Introduction"),(0,c.kt)("p",null,"The S3 Bucket service is used when we want to make changes to buckets."),(0,c.kt)("p",null,"We can do multiple things with this service like:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"create buckets"),(0,c.kt)("li",{parentName:"ul"},"list buckets"),(0,c.kt)("li",{parentName:"ul"},"delete buckets"),(0,c.kt)("li",{parentName:"ul"},"tag buckets and etc.")),(0,c.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,c.kt)("p",null,"The pre-requisites to use this service is just to have the main module initialized in our app, so we have access to all the services that it exports.\nLater when we need a service we can simply:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable } from '@nestjs/common';\nimport { BucketsService } from '@lab08/nestjs-s3';\n\n@Injectable()\nexport class MyService {\n  public constructor(private readonly bucketService: BucketService) {}\n}\n")),(0,c.kt)("p",null,"then we can simply call start using the service freely."),(0,c.kt)("h3",{id:"listing-buckets"},"Listing buckets"),(0,c.kt)("p",null,"One of the things we can do is list buckets. In other to do that we can use the ",(0,c.kt)("inlineCode",{parentName:"p"},"list")," method of the service"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"const buckets = await this.bucketService.list();\n")),(0,c.kt)("p",null,"which will return a ",(0,c.kt)("inlineCode",{parentName:"p"},"Promise")," containing"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ListBucketsCommandOutput {\n  /**\n   * The list of buckets owned by the requestor.\n   */\n  Buckets?: Bucket[];\n  /**\n   * The owner of the buckets listed.\n   */\n  Owner?: Owner;\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,c.kt)("h3",{id:"creating-buckets"},"Creating buckets"),(0,c.kt)("p",null,"When we need to create a new bucket we can just simply call"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"const bucket = await this.bucketService.create('test-bucket');\n")),(0,c.kt)("p",null,"or"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"const bucket = await this.bucketService.create('test-bucket', options);\n")),(0,c.kt)("p",null,"where options can be"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface CreateBucketRequest {\n  /**\n   * The canned ACL to apply to the bucket.\n   */\n  ACL?: BucketCannedACL | string;\n  /**\n   * The configuration information for the bucket.\n   */\n  CreateBucketConfiguration?: CreateBucketConfiguration;\n  /**\n   * Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.\n   */\n  GrantFullControl?: string;\n  /**\n   * Allows grantee to list the objects in the bucket.\n   */\n  GrantRead?: string;\n  /**\n   * Allows grantee to read the bucket ACL.\n   */\n  GrantReadACP?: string;\n  /**\n   * Allows grantee to create new objects in the bucket.\n   * For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.\n   */\n  GrantWrite?: string;\n  /**\n   * Allows grantee to write the ACL for the applicable bucket.\n   */\n  GrantWriteACP?: string;\n  /**\n   * Specifies whether you want S3 Object Lock to be enabled for the new bucket.\n   */\n  ObjectLockEnabledForBucket?: boolean;\n}\n")),(0,c.kt)("p",null,"which will return a ",(0,c.kt)("inlineCode",{parentName:"p"},"Promise")," containing"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"interface CreateBucketCommandOutput {\n  /**\n   * Specifies the Region where the bucket will be created. If you are creating a bucket on\n   *          the US East (N. Virginia) Region (us-east-1), you do not need to specify the\n   *          location.\n   */\n  Location?: string;\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")))}k.isMDXComponent=!0}}]);