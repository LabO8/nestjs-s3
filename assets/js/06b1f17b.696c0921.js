"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[239],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(n),g=i,k=d["".concat(s,".").concat(g)]||d[g]||p[g]||r;return n?a.createElement(k,c(c({ref:t},u),{},{components:n})):a.createElement(k,c({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,c=new Array(r);c[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var l=2;l<r;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},235:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),c=["components"],o={id:"buckets",title:"Buckets service",sidebar_label:"Buckets",slug:"/buckets-service"},s=void 0,l={unversionedId:"buckets",id:"buckets",title:"Buckets service",description:"Introduction",source:"@site/docs/buckets.md",sourceDirName:".",slug:"/buckets-service",permalink:"/nestjs-s3/buckets-service",editUrl:"https://github.com/LabO8/nestjs-s3/docs/buckets.md",tags:[],version:"current",frontMatter:{id:"buckets",title:"Buckets service",sidebar_label:"Buckets",slug:"/buckets-service"},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/nestjs-s3/"},next:{title:"Objects",permalink:"/nestjs-s3/objects-service"}},u=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Basic usage",id:"basic-usage",children:[{value:"Listing buckets",id:"listing-buckets",children:[],level:3},{value:"Creating buckets",id:"creating-buckets",children:[],level:3},{value:"Deleting buckets",id:"deleting-buckets",children:[],level:3},{value:"Listing buckets",id:"listing-buckets-1",children:[],level:3},{value:"Searching for a bucket by name",id:"searching-for-a-bucket-by-name",children:[],level:3},{value:"Upading a bucket",id:"upading-a-bucket",children:[{value:"Tagging",id:"tagging",children:[],level:4},{value:"Updating CORS",id:"updating-cors",children:[],level:4},{value:"Updating ACL",id:"updating-acl",children:[],level:4},{value:"Updating Logging",id:"updating-logging",children:[],level:4},{value:"Updating encryption",id:"updating-encryption",children:[],level:4},{value:"Updating accelerate configuration",id:"updating-accelerate-configuration",children:[],level:4}],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The S3 Bucket service is used when we want to make changes to buckets."),(0,r.kt)("p",null,"We can do multiple things with this service like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"create buckets"),(0,r.kt)("li",{parentName:"ul"},"list buckets"),(0,r.kt)("li",{parentName:"ul"},"delete buckets"),(0,r.kt)("li",{parentName:"ul"},"tag buckets, etc.")),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"The pre-requisites to use this service are to have the main module initialized in our app, so we can access all the services it exports.\nLater, when we need a service we can simply:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable } from '@nestjs/common';\nimport { BucketsService } from '@lab08/nestjs-s3';\n\n@Injectable()\nexport class MyService {\n  public constructor(private readonly bucketService: BucketService) {}\n}\n")),(0,r.kt)("p",null,"then we can simply call start using the service freely."),(0,r.kt)("h3",{id:"listing-buckets"},"Listing buckets"),(0,r.kt)("p",null,"One of the things we can do is list buckets. In other to do that we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method of the service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const buckets = await this.bucketService.list();\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," containing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ListBucketsCommandOutput {\n  /**\n   * The list of buckets owned by the requestor.\n   */\n  Buckets?: Bucket[];\n  /**\n   * The owner of the buckets listed.\n   */\n  Owner?: Owner;\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h3",{id:"creating-buckets"},"Creating buckets"),(0,r.kt)("p",null,"When we need to create a new bucket we can just simply call"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const bucket = await this.bucketService.create('test-bucket');\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const bucket = await this.bucketService.create('test-bucket', options);\n")),(0,r.kt)("p",null,"where options can be"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface CreateBucketRequest {\n  /**\n   * The canned ACL to apply to the bucket.\n   */\n  ACL?: BucketCannedACL | string;\n  /**\n   * The configuration information for the bucket.\n   */\n  CreateBucketConfiguration?: CreateBucketConfiguration;\n  /**\n   * Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.\n   */\n  GrantFullControl?: string;\n  /**\n   * Allows grantee to list the objects in the bucket.\n   */\n  GrantRead?: string;\n  /**\n   * Allows grantee to read the bucket ACL.\n   */\n  GrantReadACP?: string;\n  /**\n   * Allows grantee to create new objects in the bucket.\n   * For the bucket and object owners of existing objects, it also allows deletions and overwrites.\n   */\n  GrantWrite?: string;\n  /**\n   * Allows grantee to write the ACL for the applicable bucket.\n   */\n  GrantWriteACP?: string;\n  /**\n   * Specifies whether you want S3 Object Lock for the new bucket.\n   */\n  ObjectLockEnabledForBucket?: boolean;\n}\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," containing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface CreateBucketCommandOutput {\n  /**\n   * Specifies the Region where the bucket will be created. If you are creating a bucket on\n   *          the US East (N. Virginia) Region (us-east-1), you do not need to specify the\n   *          location.\n   */\n  Location?: string;\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h3",{id:"deleting-buckets"},"Deleting buckets"),(0,r.kt)("p",null,"After we already have a bucket, we can easily remove it. This can be done by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.delete('test-bucket');\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with the delete operation output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface DeleteBucketCommandOutput {\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h3",{id:"listing-buckets-1"},"Listing buckets"),(0,r.kt)("p",null,"We can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method if we want to get all our existing buckets."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.list();\n")),(0,r.kt)("p",null,"which will return a list of all the buckets, that we have access to. It returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ListBucketsCommandOutput {\n  /**\n   * <p>The list of buckets owned by the requestor.</p>\n   */\n  Buckets?: Bucket[];\n  /**\n   * <p>The owner of the buckets listed.</p>\n   */\n  Owner?: Owner;\n\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h3",{id:"searching-for-a-bucket-by-name"},"Searching for a bucket by name"),(0,r.kt)("p",null,"If we want to see if we have a bucket with a specific name, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," method and pass the name of the bucket we want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.find('test');\n")),(0,r.kt)("p",null,"If found this method will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Bucket")," object, or if it cannot find a bucket - ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"upading-a-bucket"},"Upading a bucket"),(0,r.kt)("h4",{id:"tagging"},"Tagging"),(0,r.kt)("p",null,"We can do other things with a bucket like updating tags"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.tagging('test');\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface GetBucketTaggingCommandOutput {\n  /**\n   * <p>Contains the tag set.</p>\n   */\n  TagSet: Tag[] | undefined;\n\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h4",{id:"updating-cors"},"Updating CORS"),(0,r.kt)("p",null,"We can update the exsisting cors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.updateCors('test', options);\n")),(0,r.kt)("p",null,"which can receive the following options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface CORSConfiguration {\n  /**\n   * <p>A set of origins and methods (cross-origin access you want to allow). You can add\n   *          up to 100 rules to the configuration.</p>\n   */\n  CORSRules: CORSRule[] | undefined;\n}\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketCorsCommandOutput {\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h4",{id:"updating-acl"},"Updating ACL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.updateAcl('test', options);\n")),(0,r.kt)("p",null,"which can receive the following options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface CORSConfiguration {\n  /**\n   * <p>The canned ACL to apply to the bucket.</p>\n   */\n  ACL?: BucketCannedACL | string;\n  /**\n   * <p>Contains the elements that set the ACL permissions for an object per grantee.</p>\n   */\n  AccessControlPolicy?: AccessControlPolicy;\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message\n   *          integrity check to verify that the request body was not corrupted in transit. For more\n   *          information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC\n   *          1864.</a>\n   *          </p>\n   *          <p>For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n  /**\n   * <p>Allows grantee the read, write, read ACP, and write ACP permissions on the\n   *          bucket.</p>\n   */\n  GrantFullControl?: string;\n  /**\n   * <p>Allows grantee to list the objects in the bucket.</p>\n   */\n  GrantRead?: string;\n  /**\n   * <p>Allows grantee to read the bucket ACL.</p>\n   */\n  GrantReadACP?: string;\n  /**\n   * <p>Allows grantee to create new objects in the bucket.</p>\n   *          <p>For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.</p>\n   */\n  GrantWrite?: string;\n  /**\n   * <p>Allows grantee to write the ACL for the applicable bucket.</p>\n   */\n  GrantWriteACP?: string;\n  /**\n   * <p>The account ID of the expected bucket owner. If different account owns the bucket, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n')),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketAclCommandOutput {\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h4",{id:"updating-logging"},"Updating Logging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.updateLogging('test', options);\n")),(0,r.kt)("p",null,"which can receive the following options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketLoggingCommandInput {\n  /**\n   * <p>Container for logging status information.</p>\n   */\n  BucketLoggingStatus: BucketLoggingStatus | undefined;\n  /**\n   * <p>The MD5 hash of the <code>PutBucketLogging</code> request body.</p>\n   *          <p>For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n  /**\n   * <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketLoggingCommandOutput {\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h4",{id:"updating-encryption"},"Updating encryption"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.updateEncryption('test', options);\n")),(0,r.kt)("p",null,"which can receive the following options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketEncryptionCommandInput {\n  /**\n   * <p>The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.</p>\n   *          <p>For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.</p>\n   */\n  ContentMD5?: string;\n  /**\n   * <p>Specifies the default server-side-encryption configuration.</p>\n   */\n  ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration | undefined;\n  /**\n   * <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>\n   */\n  ExpectedBucketOwner?: string;\n}\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketEncryptionCommandOutput {\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")),(0,r.kt)("h4",{id:"updating-accelerate-configuration"},"Updating accelerate configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await this.bucketService.updateAccelerateConfiguration('test', options);\n")),(0,r.kt)("p",null,"which can receive the following options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface AccelerateConfiguration {\n  /**\n   * <p>Specifies the transfer acceleration status of the bucket.</p>\n   */\n  Status?: BucketAccelerateStatus | string;\n}\n")),(0,r.kt)("p",null,"which will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface PutBucketAccelerateConfigurationCommandOutput {\n  /**\n   * Metadata pertaining to this request.\n   */\n  $metadata: ResponseMetadata;\n}\n")))}d.isMDXComponent=!0}}]);