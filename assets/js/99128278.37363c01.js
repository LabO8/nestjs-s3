"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[563],{4988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var s=n(4848),i=n(8453);const o={id:"deletion-helper",title:"Deletion helper",sidebar_label:"Deletion helper",slug:"/deletion-helper"},r=void 0,c={id:"deletion-helper",title:"Deletion helper",description:"Introduction",source:"@site/docs/deletion-helper.md",sourceDirName:".",slug:"/deletion-helper",permalink:"/nestjs-s3/deletion-helper",draft:!1,unlisted:!1,editUrl:"https://github.com/LabO8/nestjs-s3/docs/deletion-helper.md",tags:[],version:"current",frontMatter:{id:"deletion-helper",title:"Deletion helper",sidebar_label:"Deletion helper",slug:"/deletion-helper"},sidebar:"docsSidebar",previous:{title:"Prefixing",permalink:"/nestjs-s3/prefixing"},next:{title:"Class: BucketsService",permalink:"/nestjs-s3/api/classes/BucketsService"}},l={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Return value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Delete all objects from a folder with default options",id:"delete-all-objects-from-a-folder-with-default-options",level:3},{value:"Delete all objects from a folder with custom options for the files count which are deleted in one request",id:"delete-all-objects-from-a-folder-with-custom-options-for-the-files-count-which-are-deleted-in-one-request",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"We want to be able to delete files from a directory. This is a common task, but it can be tedious to do it manually."}),"\n",(0,s.jsx)(t.p,{children:"In order to do that we can use the deletion helper."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { DeletionService } from '@lab08/nestjs-s3';\n\n@Injectable()\nexport class MyService {\n  public constructor(private readonly deletionService: DeletionService) {}\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"What the deletion service does is help us delete files from a folder without a lot of code."}),"\n",(0,s.jsx)(t.p,{children:"In order to delete the folder and all the objects inside, we can simply"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const result = this.deletionService.deleteObjectsByPrefix(bucket, prefix, logDeletedObjects, deleteOptions, listOptions);\n"})}),"\n",(0,s.jsx)(t.p,{children:"we can pass the bucket, prefix(folder name), logDeletedObjects, deleteOptions and listOptions."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"logDeletedObjects"})," is a boolean value which is used to specify if we want the deleted objects response."]}),"\n",(0,s.jsxs)(t.p,{children:["If it is true the return value of the function is ",(0,s.jsx)(t.code,{children:"Promise<DeleteObjectsOutput[]>"}),".\nOtherwise, the return value is ",(0,s.jsx)(t.code,{children:"Promise<boolean>"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"deleteOptions"})," is an object which is used to specify the options for the delete request.\nThe type is ",(0,s.jsx)(t.code,{children:"DeleteObjectsOptions"}),". We can also pass options for the request made to S3"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'interface DeleteObjectsRequest {\n    /**\n     * <p>The concatenation of the authentication device\'s serial number, a space, and the value\n     *          that is displayed on your authentication device. Required to permanently delete a versioned\n     *          object if versioning is configured with MFA delete enabled.</p>\n     */\n    MFA?: string;\n    /**\n     * <p>Confirms that the requester knows that they will be charged for the request. Bucket\n     *          owners need not specify this parameter in their requests. For information about downloading\n     *          objects from Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in\n     *             Requester Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>\n     */\n    RequestPayer?: RequestPayer | string;\n    /**\n     * <p>Specifies whether you want to delete this object even if it has a Governance-type Object\n     *          Lock in place. To use this header, you must have the\n     *             <code>s3:BypassGovernanceRetention</code> permission.</p>\n     */\n    BypassGovernanceRetention?: boolean;\n    /**\n     * <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>\n     */\n    ExpectedBucketOwner?: string;\n    /**\n     * <p>Indicates the algorithm used to create the checksum for the object when using the SDK. This header will not provide any\n     *     additional functionality if not using the SDK. When sending this header, there must be a corresponding <code>x-amz-checksum</code> or\n     *     <code>x-amz-trailer</code> header sent. Otherwise, Amazon S3 fails the request with the HTTP status code <code>400 Bad Request</code>. For more\n     *     information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking object integrity</a> in\n     *     the <i>Amazon S3 User Guide</i>.</p>\n     *          <p>If you provide an individual checksum, Amazon S3 ignores any provided\n     *             <code>ChecksumAlgorithm</code> parameter.</p>\n     *          <p>This checksum algorithm must be the same for all parts and it match the checksum value\n     *          supplied in the <code>CreateMultipartUpload</code> request.</p>\n     */\n    ChecksumAlgorithm?: ChecksumAlgorithm | string;\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"listOptions"})," is an object which is used to specify the options for the list request, which is needed in order to get the objects which should be deleted.\nIts type is ",(0,s.jsx)(t.code,{children:"Omit<ListObjectsV2Options, 'Prefix' | 'ContinuationToken'>"}),".\nWe omit the ",(0,s.jsx)(t.code,{children:"Prefix"})," and ",(0,s.jsx)(t.code,{children:"ContinuationToken"})," because they are already specified in the function call.\nWe can also pass options for the request made to S3"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"interface ListObjectsV2Request {\n    /**\n     * <p>A delimiter is a character that you use to group keys.</p>\n     */\n    Delimiter?: string;\n    /**\n     * <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>\n     */\n    EncodingType?: EncodingType | string;\n    /**\n     * <p>Sets the maximum number of keys returned in the response. By default, the action returns\n     *          up to 1,000 key names. The response might contain fewer keys but will never contain\n     *          more.</p>\n     */\n    MaxKeys?: number;\n    /**\n     * <p>The owner field is not present in <code>ListObjectsV2</code> by default. If you want to\n     *          return the owner field with each key in the result, then set the <code>FetchOwner</code>\n     *          field to <code>true</code>.</p>\n     */\n    FetchOwner?: boolean;\n    /**\n     * <p>StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this\n     *          specified key. StartAfter can be any key in the bucket.</p>\n     */\n    StartAfter?: string;\n    /**\n     * <p>Confirms that the requester knows that she or he will be charged for the list objects\n     *          request in V2 style. Bucket owners need not specify this parameter in their\n     *          requests.</p>\n     */\n    RequestPayer?: RequestPayer | string;\n    /**\n     * <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>\n     */\n    ExpectedBucketOwner?: string;\n    /**\n     * <p>Specifies the optional fields that you want returned in the response.\n     *          Fields that you do not specify are not returned.</p>\n     */\n    OptionalObjectAttributes?: (OptionalObjectAttributes | string)[];\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"return-value",children:"Return value"}),"\n",(0,s.jsxs)(t.p,{children:["The return value of the function is ",(0,s.jsx)(t.code,{children:"Promise<DeleteObjectsOutput[]>"})," if ",(0,s.jsx)(t.code,{children:"logDeletedObjects"})," is true.\nOtherwise, the return value is ",(0,s.jsx)(t.code,{children:"Promise<boolean>"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["If no files are found with the specified ",(0,s.jsx)(t.code,{children:"prefix"}),", the return value is ",(0,s.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.h3,{id:"delete-all-objects-from-a-folder-with-default-options",children:"Delete all objects from a folder with default options"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const result = await deletionHelperService.deleteObjectsByPrefix(bucketName, 'delete-prefix');\n"})}),"\n",(0,s.jsx)(t.h3,{id:"delete-all-objects-from-a-folder-with-custom-options-for-the-files-count-which-are-deleted-in-one-request",children:"Delete all objects from a folder with custom options for the files count which are deleted in one request"}),"\n",(0,s.jsx)(t.p,{children:"The default value is 1000, but we can change it to something else if we want to load and delete the files in smaller batches."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const result = await deletionHelperService.deleteObjectsByPrefix(\n  bucketName,\n  'delete-prefix1',\n  false,\n  {},\n  { MaxKeys: 10 },\n);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);